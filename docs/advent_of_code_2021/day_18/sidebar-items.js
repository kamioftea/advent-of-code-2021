initSidebarItems({"enum":[["Direction","When a pair is exploding due to being too deep, the number that still needs to be assigned is passed up to the parent. This indicates which way it is travelling / which half of the pair it came from."],["SnailfishNumber","Represents a snailfish number as a binary tree"]],"fn":[["add_numbers","The solution to part one - fold the list of numbers into the first and return the resulting number. The puzzle solution then converts this to its magnitude, but returning the full tree allows unit tests to compare this to the expectation."],["max_sum","The solution to part two - uses [Itertools::permutations] to match up each pair of numbers in both orders, map them to the magnitude of the sum, and reduce that to the maximum."],["parse_input","Split the input into lines and parse each with [`SnailfishNumber::from`]"],["run","The entry point for running the solutions with the ‘real’ puzzle input."]]});