initSidebarItems({"fn":[["largest_distance","Take the set of scanner offsets returned by [`merge_all`], explode into all combinations of pairs with [`Itertools::tuple_combinations`], map those to the manhattan distance, and take the maximum."],["merge_all","Use the first scanner as the base set, and repeatedly hunt for scanners that can be merged until the relative positions of all of them has been determined, Return the set of beacons that results in, and the list of scanner offsets. Note the order of the scanner list doesn’t matter so the more efficient [`Vec::swap_remove`] can be used."],["parse_scanners","Split the input on the double line breaks between scanner inputs, and for each then builds the list of relative beacon co-ordinates."],["rotations","Expand a scanner into each of the 24 possible rotations. I started off trying to build the set of rotation functions as a static vector of closures that could be cached using `lazy_static!` but I was wasting too much time trying to satisfy the compiler so ended up with this mess as I inlined the 6 valid combinations for each ±x, ±y permutation."],["run","The entry point for running the solutions with the ‘real’ puzzle input."],["try_merge","Explode the scanner into its 24 rotations, then for each, pair each up with every element in the fixed beacon set, and work out the position delta needed to make them match up. If we can find 12 or more point pairs that share the same delta, that delta gives a translation for the current rotation that has enough overlap to be confident that is is a match. Take the first rotation (if any) that produces a match. If a match is found, apply that delta to the current rotation of the scanner data, and merge those points with the existing fixed set. Then return the delta as that is also the scanner position. [Itertools::cartesian_product], [`Itertools::counts`], and [`Iterator::find_map`] respectively do the pairing of scanner points with the existing beacon set, grouping by delta, and finding the first match (if any) both for the rotations, and delta groups."]],"type":[["Position","Type alias for a 3D co-ordinate, used for beacon and scanner offsets."],["Scanner","Type alias for the data set of one scanner. A list of the relative positions of all beacons the scanner can detect."]]});