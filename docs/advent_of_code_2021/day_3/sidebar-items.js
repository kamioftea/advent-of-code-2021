initSidebarItems({"fn":[["analyse_diagnostics","This solves part one, returning the pair of required values. It calculates the gamma value by iterating through each bit in the input strings and comparing the result of [`count_bit`] to the size of the data. The epsilon value is the bitwise inverse of that."],["analyse_life_support","This solves part two, returning the pair of required values. The solution calls for successively filtering the input array until only one value array, which works well as a recursive function. The base case for this is when the provided array is of length 1, and returns the remaining value if it is present. Otherwise split the input based on whether the bit we care about is set, then recurse the largest/smallest half based on which value is being calculated, and the bit position advanced by 1. Unlike part one, the recursion means there isn’t a neat trick to invert the first result to product the second, so the recursive function is called twice, with a flag used to switch the mode."],["count_bit","Return the number of values in the data where all the bits set in the bitmask are also set in the value. Utility function used by [`analyse_diagnostics`]. For this puzzle, only one bit is set in the mask at a time."],["parse_input","Returns a pair of the parsed data and the length of the bit strings. Delegates to the built in [`usize::from_str_radix`]. The length is needed for some of the bitwise tricks."],["run","The entry point for running the solutions with the ‘real’ puzzle input."]]});