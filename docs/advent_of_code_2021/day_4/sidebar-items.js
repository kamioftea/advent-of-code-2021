initSidebarItems({"fn":[["parse_card","This takes a string with 5 lines, each with 5 space-separated numbers, representing a 5 x 5 bingo card. A regex is used to split the numbers on a line as single digit numbers cause there to be two spaces prefixing those numbers. [`Iterator::enumerate`] is used to track the current co-ordinates for building the map of unmarked numbers. The row and column arrays are initialised to 0s as no numbers have yet been marked."],["parse_input","Parse the puzzle input into the internal representation. first there is a line of numbers in the sequence the will be called to mark on the cards, then 100 5 x 5 grids of numbers representing each card. The first line and each card are separated by blank lines."],["play_bingo","Iterate through the numbers, marking each card as appropriate. Return the first card to win and the number that triggered it, as both are needed to calculate the puzzle solution."],["play_bingo_until_last","Iterate through the numbers, marking each card as appropriate. Very similar to [`play_bingo`] except it needs to keep going until all cards have won. This leads to some complexity to manage removing the cards from the iterator as we’re looping over the same list."],["run","The entry point for running the solutions with the ‘real’ puzzle input."]],"struct":[["BingoCard","This represents the key information to know if a 5 x 5 bingo card has won."]]});